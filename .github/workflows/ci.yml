name: CI

on:
  # push:
  #   branches:
  #     - "master"
  #     - "develop"
  pull_request:
    branches:
      - "master"
      - "develop"

env:
  DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
  DISCORD_APPLICATION_ID: ${{ secrets.DISCORD_APPLICATION_ID }}

jobs:
  build:
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: true
      matrix:
        platform:
          - { name: "Windows (MSVC)", os: windows-latest }
          - { name: "Ubuntu (GCC)", os: ubuntu-latest }

    steps:
      # Checkout the repo
      - name: Checkout
        uses: actions/checkout@v2

      # Install dependencies if we're on Linux
      - name: Install Dependencies
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install libsqlite3-dev libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libdrm-dev libgbm-dev

      # Install the mold linker if we're on Linux
      - name: Install Mold
        if: runner.os == 'Linux'
        uses: rui314/setup-mold@v1

      # Install dependencies if we're on Windows
      - name: Install Dependencies
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          choco install openssl
          choco install sqlite --params "/NoTools"

      # Get the build dependencies from the cache
      - name: Cache CMake Dependencies
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/build/_deps
          key: ${{ runner.os }}-deps

      # Create the build directory
      - name: Create Build Directory
        shell: bash
        run: if [ ! -d '${{ github.workspace }}/build' ]; then mkdir '${{ github.workspace }}/build'; fi

      # Configure CMake to generate MongoCXX targets
      - name: Configure CMake to Generate MongoCXX Targets
        shell: bash
        run: cmake -S '${{ github.workspace }}' -B '${{ github.workspace }}/build'

      # Configure CMake
      - name: Configure CMake
        shell: bash
        run: cmake -S '${{ github.workspace }}' -B '${{ github.workspace }}/build'

      # Build the project
      - name: Build
        shell: bash
        run: cmake --build '${{ github.workspace }}/build' --config Debug
